openapi: "3.0.2"
info:
  title: "WorkerService API"
  description: "Manages a collection of objects. The collection must store Worker class objects"
  version: "0.2"
  contact:
    name: "WorkerService API"
    url: "https://elephants.org/workerapi"
    email: "k.arseny03@gmail.com"
  license:
    name: "CC Attribution-ShareAlike 4.0 (CC BY-SA 4.0)"
    url: "https://elephants.org/price"

servers:
  - url: 'https://localhost:8080/api/v0.1'

paths:
  /api/worker/get/{id}:
    get:
      summary: "Get worker by id"
      description: "Get worker by id"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: "0b4cd6d5-5a8b-4aa7-8f4a-49b74a733a90"
      responses:
        '200':
          description: "Return all information about worker"
          content:
            application/json:
              schema:
                $ref: "./Models.yml#/components/schemas/Worker"
        '400':
          description: Invalid parameters supplied
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 400
                  message:
                    type: string
                    example: Invalid parameters supplied
                  time:
                    type: string
                    format: date-time
                    example: "2024-10-01T16:06:38.397Z"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 500
                  message:
                    type: string
                    example: Internal server error
                  time:
                    type: string
                    format: date-time
                    example: "2024-10-01T16:06:38.397Z"
  /api/worker/delete/{id}:
    delete:
      summary: "Delete worker by id"
      description: "Delete worker by id"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: "0b4cd6d5-5a8b-4aa7-8f4a-49b74a733a90"
      responses:
        '200':
          description: "Delete worker by id"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Ok
                  time:
                    type: string
                    format: date-time
                    example: "2024-10-01T16:06:38.397Z"
        204:
          $ref: "./Models.yml#/components/ResponseContent/NotFound"
        '400':
          description: Invalid parameters supplied
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 400
                  message:
                    type: string
                    example: Invalid parameters supplied
                  time:
                    type: string
                    format: date-time
                    example: "2024-10-01T16:06:38.397Z"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 500
                  message:
                    type: string
                    example: Internal server error
                  time:
                    type: string
                    format: date-time
                    example: "2024-10-01T16:06:38.397Z"

  /api/worker/update/{id}:
    patch:
      summary: "Update worker information by id"
      description: "Update worker information by id"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: "0b4cd6d5-5a8b-4aa7-8f4a-49b74a733a90"
      requestBody:
        content:
          application/json:
            schema:
               $ref: "./Models.yml#/components/schemas/NullableWorker"
      responses:
        200:
          $ref: "./Models.yml#/components/ResponseContent/ok"
        204:
          $ref: './Models.yml#/components/ResponseContent/NoContent'
        304:
          $ref: './Models.yml#/components/ResponseContent/NoModified'
        400:
          $ref: "./Models.yml#/components/ResponseContent/BadRequest"
        404:
          $ref: "./Models.yml#/components/ResponseContent/NotFound"
        500:
          $ref: "./Models.yml#/components/ResponseContent/InitialServerError"
  /api/worker/create:
    post:
      summary: "Create a new worker"
      description: "Create a new worker"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "./Models.yml#/components/schemas/WorkerWithoutId"
      responses:
        200:
          $ref: "./Models.yml#/components/ResponseContent/ok"

        400:
          $ref: "./Models.yml#/components/ResponseContent/BadRequest"
        500:
          $ref: "./Models.yml#/components/ResponseContent/InitialServerError"

  /api/workers/get:
    get:
      summary: Get list of workers
      description: Get list of workers
      parameters:
        - name: sort
          in: query
          description: Choose your order by increasing "-" before parameter you need.
          required: false
          schema:
            type: array
            items:
              type: string
              default: id
              enum:
                - -id
                - -name
                - -coordinates.x
                - -coordinates.y
                - -creationDate
                - -salary
                - -startDate
                - -position
                - -status
                - -person.birthday
                - -person.passportID
                - -person.hairColor
                - -person.nationality
        - name: filter
          in: query
          required: false
          description: Insert a fields for sorting. Incorrect filling would have 400 response
          schema:
            type: array
            items:
              type: string
              enum:
                - -id
                - -name
                - -coordinates.x
                - -coordinates.y
                - -creationDate
                - -salary
                - -startDate
                - -position
                - -status
                - -person.birthday
                - -person.passportID
                - -person.hairColor
                - -person.nationality
                - -=
                - -!=
                - -<
                - ->
        - name: page
          in: query
          required: false
          description: page number for pagination
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: pageSize
          in: query
          required: false
          description: page size
          schema:
            type: integer
            default: 10
            minimum: 1
      responses:
        200:
          description: Returns an array of flats based on the specified parameters
          content:
            application/json:
              schema:
                $ref: './Models.yml#/components/schemas/Worker'
        204:
          $ref: "./Models.yml#/components/ResponseContent/NoContent"
        400:
          $ref: "./Models.yml#/components/ResponseContent/BadRequest"
        404:
          $ref: "./Models.yml#/components/ResponseContent/NotFound"
        500:
          $ref: "./Models.yml#/components/ResponseContent/InitialServerError"
  /api/worker/getUniqPosition:
    get:
      summary: Get list of uniq position per Worker
      description: Get list of uniq position per Worker
      responses:
        200:
          description: Returns list of an uniq positions per Workers
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - allOf:
                      - $ref: './Models.yml#/components/schemas/position'
                      - type: object
                        example: COOK
                    - $ref: './Models.yml#/components/schemas/position'
        204:
          $ref: './Models.yml#/components/ResponseContent/NoContent'
        400:
          $ref: './Models.yml#/components/ResponseContent/BadRequest'
        500:
          $ref: "./Models.yml#/components/ResponseContent/InitialServerError"